# 1) Imports and page setup
import os
import pandas as pd
import streamlit as st

st.set_page_config(page_title="IRONMAN Splits Viewer", page_icon="üèÅ", layout="wide")
st.title("IRONMAN Splits Viewer")
st.caption("Data source: long.csv generated by the GitHub Action (Run updater).")

# 2) Load CSV (with friendly errors)
CSV_PATH = "long.csv"

if not os.path.exists(CSV_PATH):
    st.error("long.csv not found in the repository root.")
    st.info("To create it: go to GitHub ‚Üí Actions ‚Üí 'Run updater (manual)' ‚Üí Run workflow. Then refresh this app.")
    st.stop()

try:
    df = pd.read_csv(CSV_PATH)
except Exception as e:
    st.error("Could not read long.csv.")
    st.exception(e)
    st.stop()

# 3) Validate columns and clean basics
required_cols = {"name", "split", "netTime"}
missing = required_cols - set(df.columns)
if missing:
    st.error(f"CSV is missing required columns: {sorted(missing)}")
    st.stop()

df["name"] = df["name"].astype(str).str.strip()
df["split"] = df["split"].astype(str).str.strip()
# netTime may be strings like '00:35:12' ‚Äî keep as string for display and also parse to seconds for charts
def to_seconds(t):
    if pd.isna(t):
        return None
    s = str(t).strip()
    if not s or s.lower() in {"nan", "none"}:
        return None
    parts = s.split(":")
    try:
        parts = [int(float(p)) for p in parts]
    except Exception:
        return None
    if len(parts) == 3:
        h, m, sec = parts
    elif len(parts) == 2:
        h, m, sec = 0, parts[0], parts[1]
    else:
        return None
    return h * 3600 + m * 60 + sec

df["netTime_sec"] = df["netTime"].apply(to_seconds)

# 4) Sidebar controls
with st.sidebar:
    st.header("Filters")
    # Athlete search
    athlete_query = st.text_input("Find athlete (name contains):", value="").strip()
    # Split filter (multiselect shows all available)
    all_splits = sorted(df["split"].unique().tolist())
    selected_splits = st.multiselect("Splits to show", options=all_splits, default=all_splits)

    st.divider()
    st.caption("Need newer data? Run the GitHub Action:")
    st.link_button("Run updater (manual) on GitHub", url=f"https://github.com/{st.secrets.get('repo_owner','')}/{st.secrets.get('repo_name','')}/actions", disabled=False)

# 5) Apply filters
filt = df["split"].isin(selected_splits)
if athlete_query:
    filt &= df["name"].str.contains(athlete_query, case=False, na=False)

df_view = df.loc[filt].copy()

# 6) Summary metrics
col_a, col_b, col_c = st.columns(3)
col_a.metric("Rows", f"{len(df_view):,}")
col_b.metric("Athletes", f"{df_view['name'].nunique():,}")
col_c.metric("Splits", f"{df_view['split'].nunique():,}")

# 7) Data preview
st.subheader("Data preview")
st.dataframe(df_view.head(200), use_container_width=True)

# 8) Simple charts (no external deps beyond Plotly included via Streamlit)
# Streamlit bundles Plotly support; but we‚Äôll guard import for clarity.
PLOTLY_OK = False
try:
    import plotly.express as px
    PLOTLY_OK = True
except Exception:
    pass

if PLOTLY_OK and not df_view.empty:
    # 8a) Distribution of times (seconds) per split
    st.subheader("Time distribution by split")
    df_hist = df_view.dropna(subset=["netTime_sec"]).copy()
    if not df_hist.empty:
        fig = px.box(
            df_hist,
            x="split",
            y="netTime_sec",
            points=False,
            title="Box plot of net times (seconds) by split",
        )
        fig.update_layout(height=450, margin=dict(l=10, r=10, t=40, b=10))
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.info("No parsable times available yet for charts.")

    # 8b) Select athletes to compare across splits
    st.subheader("Compare athletes across splits")
    top_names = (
        df_view["name"]
        .value_counts()
        .head(20)
        .index.tolist()
    )
    pick_names = st.multiselect("Athletes to compare", options=sorted(df_view["name"].unique()), default=top_names[:5])
    if pick_names:
        df_cmp = df_view[df_view["name"].isin(pick_names)].dropna(subset=["netTime_sec"]).copy()
        if not df_cmp.empty:
            # Maintain split order in a sensible way: SWIM, T1, BIKE1..BIKE, T2, RUN1..FINISH
            def split_sort_key(s):
                s = str(s)
                # Map common patterns to sortable keys
                if s == "SWIM": return (0, 0)
                if s == "T1": return (1, 0)
                if s.startswith("BIKE") and s != "BIKE":
                    try:
                        return (2, int(s.replace("BIKE", "")))
                    except Exception:
                        return (2, 999)
                if s == "BIKE": return (2, 1000)
                if s == "T2": return (3, 0)
                if s.startswith("RUN") and s != "FINISH":
                    try:
                        return (4, int(s.replace("RUN", "")))
                    except Exception:
                        return (4, 999)
                if s == "FINISH": return (5, 0)
                return (9, s)

            df_cmp["split_order"] = df_cmp["split"].apply(split_sort_key)
            df_cmp = df_cmp.sort_values(["name", "split_order"])

            fig2 = px.line(
                df_cmp,
                x="split",
                y="netTime_sec",
                color="name",
                markers=True,
                title="Athlete net time (seconds) by split",
            )
            fig2.update_traces(mode="lines+markers")
            fig2.update_layout(height=500, margin=dict(l=10, r=10, t=40, b=10))
            st.plotly_chart(fig2, use_container_width=True)
        else:
            st.info("Selected athletes have no parsable times yet.")

# 9) Footer help
st.divider()
st.caption(
    "If the table is empty or out of date, go to your GitHub repo ‚Üí Actions ‚Üí 'Run updater (manual)' ‚Üí Run workflow. "
    "Once it completes, refresh this page."
)
